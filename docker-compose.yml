version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=api-gateway
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - auth-service
      - student-service
      - teacher-service
      - course-service
      - grading-service
      - notification-service

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=auth-service
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - postgres-auth
      - kafka

  # Student Service
  student-service:
    build:
      context: .
      dockerfile: ./apps/student-service/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=student-service
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - mongodb
      - kafka

  # Teacher Service
  teacher-service:
    build:
      context: .
      dockerfile: ./apps/teacher-service/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=teacher-service
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - mongodb
      - kafka

  # Course Service
  course-service:
    build:
      context: .
      dockerfile: ./apps/course-service/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=course-service
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - postgres-course
      - kafka

  # Grading Service
  grading-service:
    build:
      context: .
      dockerfile: ./apps/grading-service/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=grading-service
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - mysql
      - kafka

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./apps/notification-service/Dockerfile
      target: ${NODE_ENV:-development}
      args:
        - SERVICE_NAME=notification-service
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - redis
      - kafka

  # Infrastructure Services
  postgres-auth:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_service
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data

  postgres-course:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=course_service
    volumes:
      - postgres-course-data:/var/lib/postgresql/data

  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongodb
      - MONGO_INITDB_ROOT_PASSWORD=mongodb
    volumes:
      - mongodb-data:/data/db

  mysql:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=mysql
      - MYSQL_DATABASE=grading_service
    volumes:
      - mysql-data:/var/lib/mysql

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data

volumes:
  postgres-auth-data:
  postgres-course-data:
  mongodb-data:
  mysql-data:
  redis-data:
  zookeeper-data:
  kafka-data:
